package ca.gc.aafc.seqdb.api.mapping.Dto.MapStructTest;

import static org.junit.Assert.assertEquals;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashSet;
import org.junit.Test;

import ca.gc.aafc.seqdb.api.dto.GroupDto;
import ca.gc.aafc.seqdb.api.dto.PcrBatchDto;
import ca.gc.aafc.seqdb.api.dto.PcrPrimerDto;
import ca.gc.aafc.seqdb.api.dto.PcrReactionDto;
import ca.gc.aafc.seqdb.api.dto.ProductDto;
import ca.gc.aafc.seqdb.api.dto.RegionDto;
import ca.gc.aafc.seqdb.api.dto.ThermocyclerProfileDto;
import ca.gc.aafc.seqdb.api.dtoMappers.GroupMapper;
import ca.gc.aafc.seqdb.api.dtoMappers.MapperFinder;
import ca.gc.aafc.seqdb.api.dtoMappers.PcrBatchMapper;
import ca.gc.aafc.seqdb.api.dtoMappers.PcrPrimerMapper;
import ca.gc.aafc.seqdb.api.dtoMappers.PcrProfileMapper;
import ca.gc.aafc.seqdb.api.dtoMappers.PcrReactionMapper;
import ca.gc.aafc.seqdb.api.dtoMappers.ProductMapper;
import ca.gc.aafc.seqdb.api.dtoMappers.RegionMapper;
import ca.gc.aafc.seqdb.entities.Group;
import ca.gc.aafc.seqdb.entities.PcrBatch;
import ca.gc.aafc.seqdb.entities.PcrPrimer;
import ca.gc.aafc.seqdb.entities.PcrProfile;
import ca.gc.aafc.seqdb.entities.PcrReaction;
import ca.gc.aafc.seqdb.entities.Product;
import ca.gc.aafc.seqdb.entities.Region;
import ca.gc.aafc.seqdb.factories.PcrPrimerFactory;
import ca.gc.aafc.seqdb.factories.PcrProfileFactory;
import ca.gc.aafc.seqdb.factories.RegionFactory;

public class MapStructTest {


  /**
   * Uses reflection to compare equivalent fields using getter methods.
   * Ie. If a Dto and entity both have the same field name, they will be compared.
   * The method with less methods should be the base argument as it will improve efficiency. 
   * @param base
   * @param comparison
   * @return A String HastSet containing the methods asserted(matched) and the ones missed.
   * @throws IllegalAccessException
   * @throws IllegalArgumentException
   * @throws InvocationTargetException
   */


  public static HashSet<String> verifyObjectsAreEqual(Object base, Object comparison)
      throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {

    HashSet<String> methodInformation = new HashSet<String>();

    Method comparisonMethod;
    String baseMethodName;

    for (Method getterMethod : base.getClass().getMethods()) {

      baseMethodName = getterMethod.getName();


      if (baseMethodName.contains("get")) {
        try {
          if (comparison.getClass().getMethod(baseMethodName) != null) {

            comparisonMethod = comparison.getClass().getMethod(baseMethodName);
            if (comparisonMethod.getName() != "getClass") {
              methodInformation.add("\n Asserted Method : " + comparisonMethod.getName());
              assertEquals(getterMethod.invoke(base), comparisonMethod.invoke(comparison));
            }
          }
        } catch (NoSuchMethodException e) {
          methodInformation.add("\n Missed Method : " + baseMethodName);
        }

      }
    }
    return methodInformation;
  }

  @Test
  public void mapstructMapRegionToDto_AutogeneratedMapping_MatchingObjects() throws NoSuchMethodException, SecurityException,
      IllegalAccessException, IllegalArgumentException, InvocationTargetException {
    Region region = RegionFactory.newRegion().description("About").build();


    RegionDto regionDto = RegionMapper.INSTANCE.entityToDto(region);
    System.out.println("MADE A MAPPER");

    assertEquals(regionDto.getDescription(), region.getDescription());
    assertEquals(regionDto.getSymbol(), region.getSymbol());
    assertEquals(regionDto.getName(), region.getName());
    assertEquals(regionDto.getTagId(), region.getTagId());

    verifyObjectsAreEqual(region,regionDto);



  }

  @Test
  public void ThermocyclerProfileMapper_pcrProfileToThermocyclerProfileDto() throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
    //set up base entity
    PcrProfile basePcr = PcrProfileFactory.newPcrProfile()
        .step1("Losing")
        .step2("one glove")
        .step3("is certainly")
        .step4("painful")
        .step5("but nothing")
        .step6("compared to")
        .step7("the pain,")
        .step8("of losing")
        .step9("one")
        .step10("throwing")
        .step11("away")
        .step12("the other")
        .step13("and finding")
        .step14("the first")
        .step15("one again.").build();


    //create DTO based off mapping implementation
    ThermocyclerProfileDto thermoDto = PcrProfileMapper.INSTANCE.entityToDto(basePcr);

    //verify results
   verifyObjectsAreEqual(thermoDto, basePcr);

  }

  @Test
  public void TestMapperFinder() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
    PcrProfile basePcr = PcrProfileFactory.newPcrProfile()
        .step1("Losing")
        .step2("one glove")
        .step3("is certainly")
        .step4("painful")
        .step5("but nothing")
        .step6("compared to")
        .step7("the pain,")
        .step8("of losing")
        .step9("one")
        .step10("throwing")
        .step11("away")
        .step12("the other")
        .step13("and finding")
        .step14("the first")
        .step15("one again.").build();

    ThermocyclerProfileDto thermoDto = (ThermocyclerProfileDto) MapperFinder.mapEntityToDto(ThermocyclerProfileDto.class.getSimpleName(), basePcr);


    Region baseRegion = RegionFactory.newRegion().description("About").build();

    RegionDto regionDto = (RegionDto) MapperFinder.mapEntityToDto(RegionDto.class.getSimpleName(), baseRegion);

    PcrPrimer basePrimer = PcrPrimerFactory.newPcrPrimer().build();

    PcrPrimerDto primerDto = (PcrPrimerDto) MapperFinder.mapEntityToDto(PcrPrimerDto.class.getSimpleName(), basePrimer);

    verifyObjectsAreEqual(primerDto, basePrimer);
    verifyObjectsAreEqual(regionDto, baseRegion);
    verifyObjectsAreEqual(thermoDto, basePcr);

  }

}